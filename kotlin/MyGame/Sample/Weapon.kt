// automatically generated by the FlatBuffers compiler, do not modify

package MyGame.Sample

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

/**
 * A weapon is equipment that can be used for attacking
 */
@Suppress("unused")
class Weapon : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Weapon {
        __init(_i, _bb)
        return this
    }
    /**
     * The name of the weapon
     */
    val name : String?
        get() {
            val o = __offset(4)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * The damage of the weapon
     */
    val damage : Short
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getShort(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_1_4()
        fun getRootAsWeapon(_bb: ByteBuffer): Weapon = getRootAsWeapon(_bb, Weapon())
        fun getRootAsWeapon(_bb: ByteBuffer, obj: Weapon): Weapon {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createWeapon(builder: FlatBufferBuilder, nameOffset: Int, damage: Short) : Int {
            builder.startTable(2)
            addName(builder, nameOffset)
            addDamage(builder, damage)
            return endWeapon(builder)
        }
        fun startWeapon(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(0, name, 0)
        fun addDamage(builder: FlatBufferBuilder, damage: Short) = builder.addShort(1, damage, 0)
        fun endWeapon(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
