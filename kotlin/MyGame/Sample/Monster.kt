// automatically generated by the FlatBuffers compiler, do not modify

package MyGame.Sample

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

/**
 * An enemy in the game
 */
@Suppress("unused")
class Monster : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Monster {
        __init(_i, _bb)
        return this
    }
    /**
     * Position in the world
     */
    val pos : MyGame.Sample.Vec3? get() = pos(MyGame.Sample.Vec3())
    fun pos(obj: MyGame.Sample.Vec3) : MyGame.Sample.Vec3? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    /**
     * Amount of mana left
     */
    val mana : Short
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getShort(o + bb_pos) else 150
        }
    /**
     * Amount of hp left
     */
    val hp : Short
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getShort(o + bb_pos) else 100
        }
    /**
     * Name of monster
     */
    val name : String?
        get() {
            val o = __offset(10)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Inventory of monster
     */
    fun inventory(j: Int) : UByte {
        val o = __offset(14)
        return if (o != 0) {
            bb.get(__vector(o) + j * 1).toUByte()
        } else {
            0u
        }
    }
    val inventoryLength : Int
        get() {
            val o = __offset(14); return if (o != 0) __vector_len(o) else 0
        }
    val inventoryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun inventoryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Color of the monster's skin
     */
    val color : Byte
        get() {
            val o = __offset(16)
            return if(o != 0) bb.get(o + bb_pos) else 2
        }
    /**
     * List of all weapons
     */
    fun weapons(j: Int) : MyGame.Sample.Weapon? = weapons(MyGame.Sample.Weapon(), j)
    fun weapons(obj: MyGame.Sample.Weapon, j: Int) : MyGame.Sample.Weapon? {
        val o = __offset(18)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val weaponsLength : Int
        get() {
            val o = __offset(18); return if (o != 0) __vector_len(o) else 0
        }
    val equippedType : UByte
        get() {
            val o = __offset(20)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    /**
     * Currently equiped item
     */
    fun equipped(obj: Table) : Table? {
        val o = __offset(22); return if (o != 0) __union(obj, o + bb_pos) else null
    }
    /**
     * The projected path of the monster
     */
    fun path(j: Int) : MyGame.Sample.Vec3? = path(MyGame.Sample.Vec3(), j)
    fun path(obj: MyGame.Sample.Vec3, j: Int) : MyGame.Sample.Vec3? {
        val o = __offset(24)
        return if (o != 0) {
            obj.__assign(__vector(o) + j * 12, bb)
        } else {
            null
        }
    }
    val pathLength : Int
        get() {
            val o = __offset(24); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_1_4()
        fun getRootAsMonster(_bb: ByteBuffer): Monster = getRootAsMonster(_bb, Monster())
        fun getRootAsMonster(_bb: ByteBuffer, obj: Monster): Monster {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun startMonster(builder: FlatBufferBuilder) = builder.startTable(11)
        fun addPos(builder: FlatBufferBuilder, pos: Int) = builder.addStruct(0, pos, 0)
        fun addMana(builder: FlatBufferBuilder, mana: Short) = builder.addShort(1, mana, 150)
        fun addHp(builder: FlatBufferBuilder, hp: Short) = builder.addShort(2, hp, 100)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(3, name, 0)
        fun addInventory(builder: FlatBufferBuilder, inventory: Int) = builder.addOffset(5, inventory, 0)
        fun createInventoryVector(builder: FlatBufferBuilder, data: UByteArray) : Int {
            builder.startVector(1, data.size, 1)
            for (i in data.size - 1 downTo 0) {
                builder.addByte(data[i].toByte())
            }
            return builder.endVector()
        }
        fun startInventoryVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(1, numElems, 1)
        fun addColor(builder: FlatBufferBuilder, color: Byte) = builder.addByte(6, color, 2)
        fun addWeapons(builder: FlatBufferBuilder, weapons: Int) = builder.addOffset(7, weapons, 0)
        fun createWeaponsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startWeaponsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addEquippedType(builder: FlatBufferBuilder, equippedType: UByte) = builder.addByte(8, equippedType.toByte(), 0)
        fun addEquipped(builder: FlatBufferBuilder, equipped: Int) = builder.addOffset(9, equipped, 0)
        fun addPath(builder: FlatBufferBuilder, path: Int) = builder.addOffset(10, path, 0)
        fun startPathVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(12, numElems, 4)
        fun endMonster(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishMonsterBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset)
        fun finishSizePrefixedMonsterBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset)
    }
}
