"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.MonsterT = exports.Monster = void 0;
var flatbuffers = require("flatbuffers");
var color_js_1 = require("../../my-game/sample/color.js");
var equipment_js_1 = require("../../my-game/sample/equipment.js");
var vec3_js_1 = require("../../my-game/sample/vec3.js");
var weapon_js_1 = require("../../my-game/sample/weapon.js");
/**
 * An enemy in the game
 */
var Monster = /** @class */ (function () {
    function Monster() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Monster.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Monster.getRootAsMonster = function (bb, obj) {
        return (obj || new Monster()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Monster.getSizePrefixedRootAsMonster = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Monster()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * Position in the world
     */
    Monster.prototype.pos = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new vec3_js_1.Vec3()).__init(this.bb_pos + offset, this.bb) : null;
    };
    /**
     * Amount of mana left
     */
    Monster.prototype.mana = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt16(this.bb_pos + offset) : 150;
    };
    /**
     * Amount of hp left
     */
    Monster.prototype.hp = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt16(this.bb_pos + offset) : 100;
    };
    Monster.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    /**
     * Inventory of monster
     */
    Monster.prototype.inventory = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Monster.prototype.inventoryLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Monster.prototype.inventoryArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * Color of the monster's skin
     */
    Monster.prototype.color = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : color_js_1.Color.Blue;
    };
    /**
     * List of all weapons
     */
    Monster.prototype.weapons = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? (obj || new weapon_js_1.Weapon()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    Monster.prototype.weaponsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Monster.prototype.equippedType = function () {
        var offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : equipment_js_1.Equipment.NONE;
    };
    /**
     * Currently equiped item
     */
    Monster.prototype.equipped = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    };
    /**
     * The projected path of the monster
     */
    Monster.prototype.path = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? (obj || new vec3_js_1.Vec3()).__init(this.bb.__vector(this.bb_pos + offset) + index * 12, this.bb) : null;
    };
    Monster.prototype.pathLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Monster.startMonster = function (builder) {
        builder.startObject(11);
    };
    Monster.addPos = function (builder, posOffset) {
        builder.addFieldStruct(0, posOffset, 0);
    };
    Monster.addMana = function (builder, mana) {
        builder.addFieldInt16(1, mana, 150);
    };
    Monster.addHp = function (builder, hp) {
        builder.addFieldInt16(2, hp, 100);
    };
    Monster.addName = function (builder, nameOffset) {
        builder.addFieldOffset(3, nameOffset, 0);
    };
    Monster.addInventory = function (builder, inventoryOffset) {
        builder.addFieldOffset(5, inventoryOffset, 0);
    };
    Monster.createInventoryVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Monster.startInventoryVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Monster.addColor = function (builder, color) {
        builder.addFieldInt8(6, color, color_js_1.Color.Blue);
    };
    Monster.addWeapons = function (builder, weaponsOffset) {
        builder.addFieldOffset(7, weaponsOffset, 0);
    };
    Monster.createWeaponsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    Monster.startWeaponsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Monster.addEquippedType = function (builder, equippedType) {
        builder.addFieldInt8(8, equippedType, equipment_js_1.Equipment.NONE);
    };
    Monster.addEquipped = function (builder, equippedOffset) {
        builder.addFieldOffset(9, equippedOffset, 0);
    };
    Monster.addPath = function (builder, pathOffset) {
        builder.addFieldOffset(10, pathOffset, 0);
    };
    Monster.startPathVector = function (builder, numElems) {
        builder.startVector(12, numElems, 4);
    };
    Monster.endMonster = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Monster.finishMonsterBuffer = function (builder, offset) {
        builder.finish(offset);
    };
    Monster.finishSizePrefixedMonsterBuffer = function (builder, offset) {
        builder.finish(offset, undefined, true);
    };
    Monster.createMonster = function (builder, posOffset, mana, hp, nameOffset, inventoryOffset, color, weaponsOffset, equippedType, equippedOffset, pathOffset) {
        Monster.startMonster(builder);
        Monster.addPos(builder, posOffset);
        Monster.addMana(builder, mana);
        Monster.addHp(builder, hp);
        Monster.addName(builder, nameOffset);
        Monster.addInventory(builder, inventoryOffset);
        Monster.addColor(builder, color);
        Monster.addWeapons(builder, weaponsOffset);
        Monster.addEquippedType(builder, equippedType);
        Monster.addEquipped(builder, equippedOffset);
        Monster.addPath(builder, pathOffset);
        return Monster.endMonster(builder);
    };
    Monster.prototype.unpack = function () {
        var _this = this;
        return new MonsterT((this.pos() !== null ? this.pos().unpack() : null), this.mana(), this.hp(), this.name(), this.bb.createScalarList(this.inventory.bind(this), this.inventoryLength()), this.color(), this.bb.createObjList(this.weapons.bind(this), this.weaponsLength()), this.equippedType(), (function () {
            var temp = (0, equipment_js_1.unionToEquipment)(_this.equippedType(), _this.equipped.bind(_this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })(), this.bb.createObjList(this.path.bind(this), this.pathLength()));
    };
    Monster.prototype.unpackTo = function (_o) {
        var _this = this;
        _o.pos = (this.pos() !== null ? this.pos().unpack() : null);
        _o.mana = this.mana();
        _o.hp = this.hp();
        _o.name = this.name();
        _o.inventory = this.bb.createScalarList(this.inventory.bind(this), this.inventoryLength());
        _o.color = this.color();
        _o.weapons = this.bb.createObjList(this.weapons.bind(this), this.weaponsLength());
        _o.equippedType = this.equippedType();
        _o.equipped = (function () {
            var temp = (0, equipment_js_1.unionToEquipment)(_this.equippedType(), _this.equipped.bind(_this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })();
        _o.path = this.bb.createObjList(this.path.bind(this), this.pathLength());
    };
    return Monster;
}());
exports.Monster = Monster;
var MonsterT = /** @class */ (function () {
    function MonsterT(pos, mana, hp, name, inventory, color, weapons, equippedType, equipped, path) {
        if (pos === void 0) { pos = null; }
        if (mana === void 0) { mana = 150; }
        if (hp === void 0) { hp = 100; }
        if (name === void 0) { name = null; }
        if (inventory === void 0) { inventory = []; }
        if (color === void 0) { color = color_js_1.Color.Blue; }
        if (weapons === void 0) { weapons = []; }
        if (equippedType === void 0) { equippedType = equipment_js_1.Equipment.NONE; }
        if (equipped === void 0) { equipped = null; }
        if (path === void 0) { path = []; }
        this.pos = pos;
        this.mana = mana;
        this.hp = hp;
        this.name = name;
        this.inventory = inventory;
        this.color = color;
        this.weapons = weapons;
        this.equippedType = equippedType;
        this.equipped = equipped;
        this.path = path;
    }
    MonsterT.prototype.pack = function (builder) {
        var name = (this.name !== null ? builder.createString(this.name) : 0);
        var inventory = Monster.createInventoryVector(builder, this.inventory);
        var weapons = Monster.createWeaponsVector(builder, builder.createObjectOffsetList(this.weapons));
        var equipped = builder.createObjectOffset(this.equipped);
        var path = builder.createStructOffsetList(this.path, Monster.startPathVector);
        return Monster.createMonster(builder, (this.pos !== null ? this.pos.pack(builder) : 0), this.mana, this.hp, name, inventory, this.color, weapons, this.equippedType, equipped, path);
    };
    return MonsterT;
}());
exports.MonsterT = MonsterT;
