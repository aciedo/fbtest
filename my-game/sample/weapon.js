"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.WeaponT = exports.Weapon = void 0;
var flatbuffers = require("flatbuffers");
/**
 * A weapon is equipment that can be used for attacking
 */
var Weapon = /** @class */ (function () {
    function Weapon() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Weapon.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Weapon.getRootAsWeapon = function (bb, obj) {
        return (obj || new Weapon()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Weapon.getSizePrefixedRootAsWeapon = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Weapon()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Weapon.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    /**
     * The damage of the weapon
     */
    Weapon.prototype.damage = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;
    };
    Weapon.startWeapon = function (builder) {
        builder.startObject(2);
    };
    Weapon.addName = function (builder, nameOffset) {
        builder.addFieldOffset(0, nameOffset, 0);
    };
    Weapon.addDamage = function (builder, damage) {
        builder.addFieldInt16(1, damage, 0);
    };
    Weapon.endWeapon = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Weapon.createWeapon = function (builder, nameOffset, damage) {
        Weapon.startWeapon(builder);
        Weapon.addName(builder, nameOffset);
        Weapon.addDamage(builder, damage);
        return Weapon.endWeapon(builder);
    };
    Weapon.prototype.unpack = function () {
        return new WeaponT(this.name(), this.damage());
    };
    Weapon.prototype.unpackTo = function (_o) {
        _o.name = this.name();
        _o.damage = this.damage();
    };
    return Weapon;
}());
exports.Weapon = Weapon;
var WeaponT = /** @class */ (function () {
    function WeaponT(name, damage) {
        if (name === void 0) { name = null; }
        if (damage === void 0) { damage = 0; }
        this.name = name;
        this.damage = damage;
    }
    WeaponT.prototype.pack = function (builder) {
        var name = (this.name !== null ? builder.createString(this.name) : 0);
        return Weapon.createWeapon(builder, name, this.damage);
    };
    return WeaponT;
}());
exports.WeaponT = WeaponT;
